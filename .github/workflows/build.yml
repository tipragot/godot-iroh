name: jobs/build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Build - ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: libgodot_iroh.so
            final_name: godot_iroh.so

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            bin: godot_iroh.dll
            final_name: godot_iroh.dll

          - runner: macos-latest
            target: x86_64-apple-darwin
            bin: libgodot_iroh.dylib
            final_name: godot_iroh_x64.dylib

          - runner: macos-latest
            target: aarch64-apple-darwin
            bin: libgodot_iroh.dylib
            final_name: godot_iroh_arm.dylib

          - runner: ubuntu-latest
            target: aarch64-linux-android
            bin: libgodot_iroh.so
            final_name: godot_iroh_arm64.so

          - runner: ubuntu-latest
            target: armv7-linux-androideabi
            bin: libgodot_iroh.so
            final_name: godot_iroh_armv7.so

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cargo-ndk
        if: startsWith(matrix.target, 'aarch64-linux-android') || startsWith(matrix.target, 'armv7-linux-androideabi')
        run: |
          cargo install cargo-ndk
          rustup target add aarch64-linux-android
          rustup target install aarch64-linux-android
          rustup target install armv7-linux-androideabi
          rustup target add armv7-linux-androideabi

      - name: Setup Android NDK
        if: startsWith(matrix.target, 'aarch64-linux-android') || startsWith(matrix.target, 'armv7-linux-androideabi')
        uses: nttld/setup-ndk@v1.5.0
        with:
          ndk-version: r27c

      - name: Setup Java JDK
        if: startsWith(matrix.target, 'aarch64-linux-android') || startsWith(matrix.target, 'armv7-linux-androideabi')
        uses: actions/setup-java@v4.7.1
        with:
          java-version: 17
          distribution: 'temurin'
          java-package: jdk

      - name: Build rust binary
        if: startsWith(matrix.target, 'x86_64-unknown-linux-gnu') || startsWith(matrix.target, 'x86_64-pc-windows-msvc') || startsWith(matrix.target, 'x86_64-apple-darwin') || startsWith(matrix.target, 'aarch64-apple-darwin')
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Build rust binary for android
        if: startsWith(matrix.target, 'aarch64-linux-android') || startsWith(matrix.target, 'armv7-linux-androideabi')
        run: cargo ndk -t ${{ matrix.target }} build --release --verbose

      - name: Rename binary to final_name
        run: mv target/${{ matrix.target }}/release/${{ matrix.bin }} target/${{ matrix.target }}/release/${{ matrix.final_name }}

      - name: Upload rust binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.final_name }}
          path: "target/${{ matrix.target }}/release/${{ matrix.final_name }}"

  package:
    runs-on: macos-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: addons/godot_iroh
          merge-multiple: true

      - name: Building a macOS universal lib
        run: lipo -create -output addons/godot_iroh/godot_iroh.dylib addons/godot_iroh/godot_iroh_x64.dylib addons/godot_iroh/godot_iroh_arm.dylib

      - name: Remove individual binaries
        run: rm addons/godot_iroh/godot_iroh_x64.dylib addons/godot_iroh/godot_iroh_arm.dylib

      - name: Copy license
        run: cp LICENSE addons/godot_iroh/.

      - name: Create zip archive
        run: |
          mkdir godot_iroh
          mv addons godot_iroh/.
          zip -r godot_iroh.zip godot_iroh

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: godot_iroh.zip

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: package
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for version change
        id: version_check
        run: |
          new_version=$(grep '^version =' Cargo.toml | head -n1 | sed -E 's/version = "(.*)"/\1/' | tr -d '\r')
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          git show HEAD~1:Cargo.toml > old_Cargo.toml
          old_version=$(grep '^version =' old_Cargo.toml | head -n1 | sed -E 's/version = "(.*)"/\1/' | tr -d '\r')
          echo "old_version=$old_version" >> $GITHUB_OUTPUT
          if [ "$new_version" != "$old_version" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Download package artifact
        if: steps.version_check.outputs.version_changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package
          path: .

      - name: Create Release
        if: steps.version_check.outputs.version_changed == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: godot_iroh.zip
          draft: true
